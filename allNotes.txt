REST - representational state transfer
Architectural style, a standard for systems to communicate with each other.

1 - Separate API into logical resources
resource - an object or representation of a data
e.g. movies, users, reviews

2 - Structured based URL - has an endpoint - ep shouldnt have verbs - should be nouns - use http 

3 - Use HTTP methods - use nouns and plural form - movies not movie ...
we can also use ID, NAME, or any unique identifier  -  /movie/21(id)

READ - GET
CREATE - POST - NO ID - server should automatically make it.
UPDATE - PUT - changing the whole resource/PATCH - change part of the object/resource - WITH ID
DELETE - WITH ID or unique identifier unless we delete the whole thing

CRUD - create read update delete

e.g we want movies that user created

then we can use:

/getmoviesbyuser   ->  better to do this ->  GET  users/userId/movies
/getmoviesbyuser   ->  better to do this ->  DELETE users/userId/movies/movieId


4 - Use JSON data in response

JSON
 {
      "id": 1,
      "title": "title"
    }


JSEND JSON DATA 

{
  "status": "success",
  "data": {[
    {
      "id": 1,
      "title": "title"
    }
  ]}

}

JSON:API , JSON PROTOCOL


5 - API MUST BE STATELESS

All state must be handled in the client and each info should have all the info required necessary to process a certain request.

/movies/nextPage - >
in this case, the server must remember/know where it is in order to go to the next page,
we want to avoid this when doing restful api.

what to do instead:

/movies/page/3
send(4)

we handle state in the client


************************
HANDLING GET request
************************








************************
MIDDLEWARE
************************


understanding middleware 

app.use(express.json()) //ads the req body to the req 

req - middleware - res 

middleware - usually for req

middleware order of execution matters a lot

***
Custom middleware
***

app.use() for using middlewares

all middleware applies to all types of req if the route handler comes after the middleware



MOUNTING ROUTES - HOW TO APPLY MIDDLEWARE ONLY TO A CERTAIN ROUTES

app.use('/api/v1/movies', moviesRouter) //middleware will only be applied to this link

//METHOD 2 CHAINING
moviesRouter.route ('/')  //we need to remove this whole path cause we are already appending
  .get(getAllMovies)
  .post(createMovie)

moviesRouter.route ('/:id')  //we need to remove this whole path cause we are already appending from our app.use   ...except from /:id - in our router app use we have: app.use('/api/v1/movies', moviesRouter)
  .get(getMovie)
  .patch(updateMovie)
  .delete(deleteMovie)



  *********
  UNDERSTANDING PARAM MIDDLEWARE
  *********

param middleware
we can create a middleware or we can create a function and call it on each routes...middleware is automatically pass (as long as we use next()) to any route that matches the middleware route '/id' in our example

however, in express, its mostly about middlewares, so thats what we did.


  *********
CHAINING MIDDLEWARES
  *********


  *********
SERVING STATIC FILES 
  *********


express.static



  *********
ENVIRONMENT VARIABLES
  *********

development and production ENVIRONMENT

/using different databases, turning logging on off,

default is development
env a global variable set by express

set NODE_ENV=development

create env variable by using a config FILES

user uppercase as convention
NODE_ENV=development
USERNAME=admin
PASSWORD=123456

to format, use dotenv extension
process.env available everywhere as long as we do this
const dotenv = require('dotenv');
dotenv.config({path: './config.env'});
